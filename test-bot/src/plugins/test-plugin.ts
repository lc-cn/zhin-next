import {
    useContext,
    addCommand,
    usePrompt,
    Time,
    addComponent,
    defineComponent,
    MessageCommand, useApp, Adapter,
} from 'zhin.js';
import path from "node:path";
import * as os from "node:os";
const app = useApp()
function formatMemoSize(size: number) {
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    while (size > 1024) {
        size = size / 1024
        sizes.shift()
    }
    return `${(size).toFixed(2)}${sizes[0]}`
}
addCommand(new MessageCommand('send')
    .action((_, result) => result.remaining))
addCommand(new MessageCommand('zt')
    .action(() => {
        const totalmem = os.totalmem();
        const freemem = os.freemem();
        const usedmemo = totalmem - freemem;
        return [
            '-------Ê¶ÇËßà-------',
            `Êìç‰ΩúÁ≥ªÁªüÔºö${os.type()} ${os.release()} ${os.arch()}`,
            `ÂÜÖÂ≠òÂç†Áî®Ôºö${formatMemoSize(usedmemo)}/${formatMemoSize(totalmem)} ${((usedmemo / totalmem) * 100).toFixed(2)}%`,
            `ËøêË°åÁéØÂ¢ÉÔºöNodeJS ${process.version}`,
            `ËøêË°åÊó∂ÈïøÔºö${Time.formatTime(process.uptime() * 1000)}`,
            `ÂÜÖÂ≠ò‰ΩøÁî®Ôºö${formatMemoSize(process.memoryUsage.rss())}`,
            '-------Ê°ÜÊû∂-------',
            `ÈÄÇÈÖçÂô®Ôºö${app.adapters.length}‰∏™`,
            `Êèí‰ª∂Ôºö${app.dependencyList.length}‰∏™`,
            '-------Êú∫Âô®‰∫∫-------',
            ...app.adapters.map((name) => {
                return `  ${name}Ôºö${app.getContext<Adapter>(name).bots.size}‰∏™`
            })
        ].join('\n')
    }))

const testComponent = defineComponent({
    name: 'test',
    props: {
        id: String
    },
    async render({ id }, context) {
        return 'ËøôÊòØÁà∂ÁªÑ‰ª∂' + id + (context.children || '');
    }
})
const testComponent2 = defineComponent({
    name: 'fetch',
    props: {
        url: {
            type: String,
            default: ""
        }
    },
    async render({ url }) {
        const result: string = await fetch(url).then(r => r.text())
        return result
    }
})
addComponent(testComponent)
addComponent(testComponent2)
useContext('web', (web) => {
    web.addEntry(path.resolve(path.resolve(import.meta.dirname, '../../client/index.ts')))
})
// ‰æùËµñicqq‰∏ä‰∏ãÊñá
useContext('icqq', (p) => { // ÊåáÂÆöÊüê‰∏™‰∏ä‰∏ãÊñáÂ∞±Áª™Êó∂ÔºåÈúÄË¶ÅÂÅöÁöÑ‰∫ã
    const someUsers = new MessageCommand('Ëµû[space][...atUsers:at]', { at: 'qq' })
        .scope('icqq')
        .action(async (m, { params }) => {
            if (!params.atUsers?.length) params.atUsers = [+m.$sender.id];
            const likeResult: string[] = []
            for (const user_id of params.atUsers) {
                const userResult = await Promise.all(new Array(3).fill(0).map(() => {
                    return p.bots.get(m.$bot)?.sendLike(user_id, 20)
                }));
                likeResult.push(`‰∏∫Áî®Êà∑(${user_id})Ëµû${userResult.filter(Boolean).length ? 'ÊàêÂäü' : 'Â§±Ë¥•'}`)
            }
            return likeResult.join('\n');
        })
    addCommand(someUsers);
})
const testCommand = new MessageCommand('test')
    .action(async (m) => usePrompt(m).text('ËØ∑ËæìÂÖ•ÊñáÊú¨'))
addCommand(testCommand)

// Êï∞ÊçÆÂ∫ìÊµãËØï - Áõ¥Êé•‰ΩøÁî®ÂéüÁîü SQL Êü•ËØ¢
useContext('sqlite', (sqlite) => {
    // ÁÆÄÂçïÁöÑÊï∞ÊçÆÂ∫ìÊü•ËØ¢ÊµãËØïÂëΩ‰ª§
    addCommand(new MessageCommand('dbtest')
        .action(async (message) => {
            try {
                const db = sqlite.get('main')
                if (!db) {
                    return '‚ùå Êï∞ÊçÆÂ∫ìÈ©±Âä®Êú™ÊâæÂà∞'
                }
                
                // ÂàõÂª∫ÊµãËØïË°®
                await db.query(`
                    CREATE TABLE IF NOT EXISTS test_users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        email TEXT UNIQUE,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                `)
                
                // ÊèíÂÖ•ÊµãËØïÊï∞ÊçÆ
                await db.query(
                    'INSERT OR IGNORE INTO test_users (name, email) VALUES (?, ?)',
                    ['ÊµãËØïÁî®Êà∑', 'test@example.com']
                )
                
                // Êü•ËØ¢Êï∞ÊçÆ
                const users = await db.query('SELECT * FROM test_users LIMIT 5')
                
                if (users.length === 0) {
                    return 'üìÑ ÊöÇÊó†Áî®Êà∑Êï∞ÊçÆ'
                }
                
                return 'üë• Áî®Êà∑ÂàóË°®:\n' + users.map((user: any) =>
                    `ID: ${user.id} | ÂßìÂêç: ${user.name} | ÈÇÆÁÆ±: ${user.email}`
                ).join('\n')
                
            } catch (error) {
                return `‚ùå Êï∞ÊçÆÂ∫ìÊìç‰ΩúÂ§±Ë¥•: ${(error as Error).message}`
            }
        })
    )
    
    // Êï∞ÊçÆÂ∫ìË°®‰ø°ÊÅØÊü•ËØ¢
    addCommand(new MessageCommand('dbtables')
        .action(async (message) => {
            try {
                const db = sqlite.get('main')
                if (!db) {
                    return '‚ùå Êï∞ÊçÆÂ∫ìÈ©±Âä®Êú™ÊâæÂà∞'
                }
                
                const tables = await db.getTables()
                if (tables.length === 0) {
                    return 'üìÑ Êï∞ÊçÆÂ∫ì‰∏≠ÊöÇÊó†Ë°®'
                }
                
                return 'üìã Êï∞ÊçÆÂ∫ìË°®ÂàóË°®:\n' + tables.map((table: string, index: number) =>
                    `${index + 1}. ${table}`
                ).join('\n')
                
            } catch (error) {
                return `‚ùå Êü•ËØ¢Â§±Ë¥•: ${(error as Error).message}`
            }
        })
    )
})